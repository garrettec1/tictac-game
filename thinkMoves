So I want this thing to recognize patterns.

I have a board that looks like this:

  a   b   c
1   |   |  
  ==|===|==
2   |   |  
  ==|===|==
3   |   |  

Stored like:
boardInfo = {'1a':' ', '1b':' ', '1c':' ', '2a':' ', '2b':' ', '2c':' ', '3a':' ', '3b':' ', '3c':' '} 

The moves are slightly different if the computer goes first or second.

For simplicity, I will describe the computer getting the first move first.

For the first move of the game, the computer should always choose a corner.
random?
1a, 1c, 3a, 3c

Whatever it chooses first, the second computer move should be the opposite corner.
if 1a -> 3c, if 3a -> 1c, if 1c ->3a, if 3c -> 1a

The priority is that it cannot be a place the human has moved, and it should block a human move if possible.

How to make moves immutable? 

I could program so it will get into the correct set of conditionals
then look to see if the move is 'legal'. Seems inefficient.

I could create a list of legal moves from the dictionary, and have the computer
choose from already legal moves.
(Non working psudo code for thinking)
	legalMoves.append(boardInfo.keys())
	for spaces in board info
		if key Used
			leagalMove.delete
It would be beter to initialize the list at the beginning of the game, and remove moves as they are chosen.
I will have to do some refactoring to implement, but I think this is the best solution.
	(look up how to remove specific elements of a list without knowing index. Search-pop?)

How to check for two in a row? If the opponents next move will result in a three in a row, the placement must be to block, 
I would need to check and see if doing a block is a possible move. 

How about reversing the order. Look to see if any possible moves will A)win the game. B) block the opponent from winning.
This does not need to be run until two full turns have passed. 

Winning the game and blocking are essentially the same condition. Useful?

If I impliment a chance the computer will go second, it will have to play differently. I am not sure if there is an optimum strategy 
for going second. Probably something like middle, block and try for three, win or block the remainder of the game. 

If len(possible) == 9 
	randomly pick a corner 



Describing adjacency and rows.
I have been thinking alot about it, but I think the most efficient way to code for win conditions is to 
actually hard code them in, Normally hard coding is something I really try to avoid, but the set of
possible 3 in a row is: 3 rows 3 collumns 2 diagonals. Pretty limited.
I could write a useless but fun optimization for this where it checks to see if a row or collumn 
has an opposing piece in it thus is "blockd". 
...
Actually that might be a neat way to go about programming it. 


The other way I was thinking about was trying to describe adjacency. For example, 3c is adjacent to
to 2c, 2b, and 3b. Win conditions would be met at 1a, 1c, and 3a. 2c correlates to 1c, 2b to 1a, 
3b to 1a.

The way I am talking about handling it does not really take separated corners into account.
Like a X on 1a and 3c.

I could set it up so that it starts at a position, looks at all the the possible completions
and finds if two of three slots are filled. Regardless of how I program it, this will be 
important.

When you really get down to it, coding it this way would be a much less elegent and less efficient 
way to describe the 8 possible winning moves. Makes me kind of sad, but I figure I will get plenty
of chances to solve interesting problems in interesting ways later. :)

